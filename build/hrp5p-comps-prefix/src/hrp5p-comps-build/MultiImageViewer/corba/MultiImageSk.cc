// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "MultiImage.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
MultiImage::Header::operator>>= (cdrStream &_n) const
{
  (const RTC::Time&) tm >>= _n;
  format >>= _n;
  width >>= _n;
  height >>= _n;
  size >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(P),96,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 96);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        P[_0i0][_0i1] >>= _n;
      }
    }
  }
  d1 >>= _n;
  d2 >>= _n;

}

void
MultiImage::Header::operator<<= (cdrStream &_n)
{
  (RTC::Time&)tm <<= _n;
  (PixelFormat&)format <<= _n;
  (::CORBA::ULong&)width <<= _n;
  (::CORBA::ULong&)height <<= _n;
  (::CORBA::ULong&)size <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(P), 12);
  (::CORBA::Double&)d1 <<= _n;
  (::CORBA::Double&)d2 <<= _n;

}

void
MultiImage::TimedImages::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence< Header > &) headers >>= _n;
  (const _CORBA_Unbounded_Sequence_Octet&) data >>= _n;

}

void
MultiImage::TimedImages::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence< Header > &)headers <<= _n;
  (_CORBA_Unbounded_Sequence_Octet&)data <<= _n;

}

