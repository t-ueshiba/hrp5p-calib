// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __MultiImage_hh__
#define __MultiImage_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MultiImage
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MultiImage
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MultiImage
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include <BasicDataType.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE MultiImage

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Matrix34d;

  typedef ::CORBA::Double Matrix34d[3][4];
  typedef ::CORBA::Double Matrix34d_slice[4];

  _CORBA_MODULE_INLINE Matrix34d_slice* Matrix34d_alloc() {
    return new Matrix34d_slice[3];
  }

  _CORBA_MODULE_INLINE Matrix34d_slice* Matrix34d_dup(const Matrix34d_slice* _s) {
    if (!_s) return 0;
    Matrix34d_slice* _data = Matrix34d_alloc();
    if (_data) {
      for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
        for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
          
          _data[_0i0][_0i1] = _s[_0i0][_0i1];

        }
      }
  
    }
    return _data;
  }

  _CORBA_MODULE_INLINE void Matrix34d_copy(Matrix34d_slice* _to, const Matrix34d_slice* _from){
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        
        _to[_0i0][_0i1] = _from[_0i0][_0i1];

      }
    }
  
  }

  _CORBA_MODULE_INLINE void Matrix34d_free(Matrix34d_slice* _s) {
    delete [] _s;
  }

  class Matrix34d_copyHelper {
  public:
    static inline Matrix34d_slice* alloc() { return ::MultiImage::Matrix34d_alloc(); }
    static inline Matrix34d_slice* dup(const Matrix34d_slice* p) { return ::MultiImage::Matrix34d_dup(p); }
    static inline void free(Matrix34d_slice* p) { ::MultiImage::Matrix34d_free(p); }
  };

  typedef _CORBA_Array_Fix_Var<Matrix34d_copyHelper,Matrix34d_slice> Matrix34d_var;
  typedef _CORBA_Array_Fix_Forany<Matrix34d_copyHelper,Matrix34d_slice> Matrix34d_forany;

  typedef Matrix34d_slice* Matrix34d_out;

  enum PixelFormat { UNKNOWN, MONO_8, YUV_411, YUV_422, YUYV_422, YUV_444, RGB_24, FLT /*, __max_PixelFormat=0xffffffff */ };
  typedef PixelFormat& PixelFormat_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PixelFormat;

  struct Header {
    typedef _CORBA_ConstrType_Fix_Var<Header> _var_type;

    
    RTC::Time tm;

    PixelFormat format;

    ::CORBA::ULong width;

    ::CORBA::ULong height;

    ::CORBA::ULong size;

    Matrix34d P;

    ::CORBA::Double d1;

    ::CORBA::Double d2;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Header::_var_type Header_var;

  typedef Header& Header_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Header;

  struct TimedImages {
    typedef _CORBA_ConstrType_Variable_Var<TimedImages> _var_type;

    
    typedef _CORBA_Unbounded_Sequence< Header >  _headers_seq;
    _headers_seq headers;

    typedef _CORBA_Unbounded_Sequence_Octet _data_seq;
    _data_seq data;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TimedImages::_var_type TimedImages_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< TimedImages,TimedImages_var > TimedImages_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TimedImages;

_CORBA_MODULE_END



_CORBA_MODULE POA_MultiImage
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_MultiImage
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const MultiImage::Matrix34d_forany& _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::Matrix34d_forany& _s);

inline void operator >>=(MultiImage::PixelFormat _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (MultiImage::PixelFormat& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= MultiImage::FLT) {
    _e = (MultiImage::PixelFormat) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, MultiImage::PixelFormat _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::PixelFormat& _s);

extern void operator<<=(::CORBA::Any& _a, const MultiImage::Header& _s);
extern void operator<<=(::CORBA::Any& _a, MultiImage::Header* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::Header*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MultiImage::Header*& _sp);

extern void operator<<=(::CORBA::Any& _a, const MultiImage::TimedImages& _s);
extern void operator<<=(::CORBA::Any& _a, MultiImage::TimedImages* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::TimedImages*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MultiImage::TimedImages*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MultiImage
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MultiImage
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MultiImage
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MultiImage
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MultiImage
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MultiImage
#endif

#endif  // __MultiImage_hh__

