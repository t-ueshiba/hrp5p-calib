// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Img.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_Img_mVec3 = CORBA::TypeCode::PR_alias_tc("IDL:Img/Vec3:1.0", "Vec3", CORBA::TypeCode::PR_array_tc(3, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_Vec3 = _0RL_tc_Img_mVec3;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_Vec3 = _0RL_tc_Img_mVec3;
#endif

static CORBA::TypeCode_ptr _0RL_tc_Img_mMat44 = CORBA::TypeCode::PR_alias_tc("IDL:Img/Mat44:1.0", "Mat44", CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_Mat44 = _0RL_tc_Img_mMat44;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_Mat44 = _0RL_tc_Img_mMat44;
#endif

static const char* _0RL_enumMember_Img_mColorFormat[] = { "CF_UNKNOWN", "CF_GRAY", "CF_RGB", "CF_GRAY_JPEG", "CF_RGB_JPEG", "CF_DEPTH" };
static CORBA::TypeCode_ptr _0RL_tc_Img_mColorFormat = CORBA::TypeCode::PR_enum_tc("IDL:Img/ColorFormat:1.0", "ColorFormat", _0RL_enumMember_Img_mColorFormat, 6, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_ColorFormat = _0RL_tc_Img_mColorFormat;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_ColorFormat = _0RL_tc_Img_mColorFormat;
#endif

static CORBA::PR_structMember _0RL_structmember_Img_mImageData[] = {
  {"width", CORBA::TypeCode::PR_long_tc()},
  {"height", CORBA::TypeCode::PR_long_tc()},
  {"format", _0RL_tc_Img_mColorFormat},
  {"raw_data", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Img_mImageData
#  undef _0RL_tc_Img_mImageData
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mImageData = CORBA::TypeCode::PR_struct_tc("IDL:Img/ImageData:1.0", "ImageData", _0RL_structmember_Img_mImageData, 4, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_ImageData = _0RL_tc_Img_mImageData;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_ImageData = _0RL_tc_Img_mImageData;
#endif


static CORBA::PR_structMember _0RL_structmember_Img_mCameraIntrinsicParameter[] = {
  {"matrix_element", CORBA::TypeCode::PR_array_tc(5, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)},
  {"distortion_coefficient", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Img_mCameraIntrinsicParameter
#  undef _0RL_tc_Img_mCameraIntrinsicParameter
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mCameraIntrinsicParameter = CORBA::TypeCode::PR_struct_tc("IDL:Img/CameraIntrinsicParameter:1.0", "CameraIntrinsicParameter", _0RL_structmember_Img_mCameraIntrinsicParameter, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_CameraIntrinsicParameter = _0RL_tc_Img_mCameraIntrinsicParameter;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_CameraIntrinsicParameter = _0RL_tc_Img_mCameraIntrinsicParameter;
#endif


static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);



static CORBA::PR_structMember _0RL_structmember_Img_mCameraImage[] = {
  {"captured_time", _0RL_tc_RTC_mTime},
  {"image", _0RL_tc_Img_mImageData},
  {"intrinsic", _0RL_tc_Img_mCameraIntrinsicParameter},
  {"extrinsic", _0RL_tc_Img_mMat44}
};

#ifdef _0RL_tc_Img_mCameraImage
#  undef _0RL_tc_Img_mCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/CameraImage:1.0", "CameraImage", _0RL_structmember_Img_mCameraImage, 4, &_0RL_tcTrack);




#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_CameraImage = _0RL_tc_Img_mCameraImage;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_CameraImage = _0RL_tc_Img_mCameraImage;
#endif







static CORBA::PR_structMember _0RL_structmember_Img_mTimedCameraImage[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", _0RL_tc_Img_mCameraImage},
  {"error_code", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_Img_mTimedCameraImage
#  undef _0RL_tc_Img_mTimedCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mTimedCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/TimedCameraImage:1.0", "TimedCameraImage", _0RL_structmember_Img_mTimedCameraImage, 3, &_0RL_tcTrack);






#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_TimedCameraImage = _0RL_tc_Img_mTimedCameraImage;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_TimedCameraImage = _0RL_tc_Img_mTimedCameraImage;
#endif






static CORBA::PR_structMember _0RL_structmember_Img_mMultiCameraImage[] = {
  {"image_seq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Img_mCameraImage, &_0RL_tcTrack)},
  {"camera_set_id", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_Img_mMultiCameraImage
#  undef _0RL_tc_Img_mMultiCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mMultiCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/MultiCameraImage:1.0", "MultiCameraImage", _0RL_structmember_Img_mMultiCameraImage, 2, &_0RL_tcTrack);





#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_MultiCameraImage = _0RL_tc_Img_mMultiCameraImage;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_MultiCameraImage = _0RL_tc_Img_mMultiCameraImage;
#endif








static CORBA::PR_structMember _0RL_structmember_Img_mTimedMultiCameraImage[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", _0RL_tc_Img_mMultiCameraImage},
  {"error_code", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_Img_mTimedMultiCameraImage
#  undef _0RL_tc_Img_mTimedMultiCameraImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Img_mTimedMultiCameraImage = CORBA::TypeCode::PR_struct_tc("IDL:Img/TimedMultiCameraImage:1.0", "TimedMultiCameraImage", _0RL_structmember_Img_mTimedMultiCameraImage, 3, &_0RL_tcTrack);







#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_TimedMultiCameraImage = _0RL_tc_Img_mTimedMultiCameraImage;
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_TimedMultiCameraImage = _0RL_tc_Img_mTimedMultiCameraImage;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Img { 
  const ::CORBA::TypeCode_ptr _tc_CameraCaptureService = CORBA::TypeCode::PR_interface_tc("IDL:Img/CameraCaptureService:1.0", "CameraCaptureService", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr Img::_tc_CameraCaptureService = CORBA::TypeCode::PR_interface_tc("IDL:Img/CameraCaptureService:1.0", "CameraCaptureService", &_0RL_tcTrack);
#endif

static void _0RL_Img_mVec3_marshal_fn(cdrStream& _s, void* _v)
{
  Img::Vec3_slice* _a = (Img::Vec3_slice*)_v;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _s.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      _a[_0i0] >>= _s;
    }
  }

}
static void _0RL_Img_mVec3_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::Vec3_slice* _a = Img::Vec3_alloc();
  _s.unmarshalArrayDouble((_CORBA_Double*)(_a), 3);

  _v = _a;
}
static void _0RL_Img_mVec3_destructor_fn(void* _v)
{
  Img::Vec3_slice* _a = (Img::Vec3_slice*)_v;
  Img::Vec3_free(_a);
}

void operator<<=(::CORBA::Any& _a, const Img::Vec3_forany& _s)
{
  Img::Vec3_slice* _v;
  if (!_s.NP_nocopy())
    _v = Img::Vec3_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_Img_mVec3,
               _0RL_Img_mVec3_marshal_fn,
               _0RL_Img_mVec3_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::Vec3_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mVec3,
                    _0RL_Img_mVec3_unmarshal_fn,
                    _0RL_Img_mVec3_marshal_fn,
                    _0RL_Img_mVec3_destructor_fn,
                    _v)) {
    _s = (Img::Vec3_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mMat44_marshal_fn(cdrStream& _s, void* _v)
{
  Img::Mat44_slice* _a = (Img::Mat44_slice*)_v;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),128,omni::ALIGN_8);
  }
  else 
#endif
  {
    _s.declareArrayLength(omni::ALIGN_8, 128);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        _a[_0i0][_0i1] >>= _s;
      }
    }
  }

}
static void _0RL_Img_mMat44_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::Mat44_slice* _a = Img::Mat44_alloc();
  _s.unmarshalArrayDouble((_CORBA_Double*)(_a), 16);

  _v = _a;
}
static void _0RL_Img_mMat44_destructor_fn(void* _v)
{
  Img::Mat44_slice* _a = (Img::Mat44_slice*)_v;
  Img::Mat44_free(_a);
}

void operator<<=(::CORBA::Any& _a, const Img::Mat44_forany& _s)
{
  Img::Mat44_slice* _v;
  if (!_s.NP_nocopy())
    _v = Img::Mat44_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_Img_mMat44,
               _0RL_Img_mMat44_marshal_fn,
               _0RL_Img_mMat44_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::Mat44_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mMat44,
                    _0RL_Img_mMat44_unmarshal_fn,
                    _0RL_Img_mMat44_marshal_fn,
                    _0RL_Img_mMat44_destructor_fn,
                    _v)) {
    _s = (Img::Mat44_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mColorFormat_marshal_fn(cdrStream& _s, void* _v)
{
  Img::ColorFormat* _p = (Img::ColorFormat*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mColorFormat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::ColorFormat* _p = (Img::ColorFormat*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, Img::ColorFormat _s)
{
  _a.PR_insert(_0RL_tc_Img_mColorFormat,
               _0RL_Img_mColorFormat_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::ColorFormat& _s)
{
  return _a.PR_extract(_0RL_tc_Img_mColorFormat,
                       _0RL_Img_mColorFormat_unmarshal_fn,
                       &_s);
}

static void _0RL_Img_mImageData_marshal_fn(cdrStream& _s, void* _v)
{
  Img::ImageData* _p = (Img::ImageData*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mImageData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::ImageData* _p = new Img::ImageData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Img_mImageData_destructor_fn(void* _v)
{
  Img::ImageData* _p = (Img::ImageData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Img::ImageData& _s)
{
  Img::ImageData* _p = new Img::ImageData(_s);
  _a.PR_insert(_0RL_tc_Img_mImageData,
               _0RL_Img_mImageData_marshal_fn,
               _0RL_Img_mImageData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Img::ImageData* _sp)
{
  _a.PR_insert(_0RL_tc_Img_mImageData,
               _0RL_Img_mImageData_marshal_fn,
               _0RL_Img_mImageData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::ImageData*& _sp)
{
  return _a >>= (const Img::ImageData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Img::ImageData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mImageData,
                    _0RL_Img_mImageData_unmarshal_fn,
                    _0RL_Img_mImageData_marshal_fn,
                    _0RL_Img_mImageData_destructor_fn,
                    _v)) {
    _sp = (const Img::ImageData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mCameraIntrinsicParameter_marshal_fn(cdrStream& _s, void* _v)
{
  Img::CameraIntrinsicParameter* _p = (Img::CameraIntrinsicParameter*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mCameraIntrinsicParameter_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::CameraIntrinsicParameter* _p = new Img::CameraIntrinsicParameter;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Img_mCameraIntrinsicParameter_destructor_fn(void* _v)
{
  Img::CameraIntrinsicParameter* _p = (Img::CameraIntrinsicParameter*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Img::CameraIntrinsicParameter& _s)
{
  Img::CameraIntrinsicParameter* _p = new Img::CameraIntrinsicParameter(_s);
  _a.PR_insert(_0RL_tc_Img_mCameraIntrinsicParameter,
               _0RL_Img_mCameraIntrinsicParameter_marshal_fn,
               _0RL_Img_mCameraIntrinsicParameter_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Img::CameraIntrinsicParameter* _sp)
{
  _a.PR_insert(_0RL_tc_Img_mCameraIntrinsicParameter,
               _0RL_Img_mCameraIntrinsicParameter_marshal_fn,
               _0RL_Img_mCameraIntrinsicParameter_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::CameraIntrinsicParameter*& _sp)
{
  return _a >>= (const Img::CameraIntrinsicParameter*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Img::CameraIntrinsicParameter*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mCameraIntrinsicParameter,
                    _0RL_Img_mCameraIntrinsicParameter_unmarshal_fn,
                    _0RL_Img_mCameraIntrinsicParameter_marshal_fn,
                    _0RL_Img_mCameraIntrinsicParameter_destructor_fn,
                    _v)) {
    _sp = (const Img::CameraIntrinsicParameter*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mCameraImage_marshal_fn(cdrStream& _s, void* _v)
{
  Img::CameraImage* _p = (Img::CameraImage*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mCameraImage_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::CameraImage* _p = new Img::CameraImage;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Img_mCameraImage_destructor_fn(void* _v)
{
  Img::CameraImage* _p = (Img::CameraImage*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Img::CameraImage& _s)
{
  Img::CameraImage* _p = new Img::CameraImage(_s);
  _a.PR_insert(_0RL_tc_Img_mCameraImage,
               _0RL_Img_mCameraImage_marshal_fn,
               _0RL_Img_mCameraImage_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Img::CameraImage* _sp)
{
  _a.PR_insert(_0RL_tc_Img_mCameraImage,
               _0RL_Img_mCameraImage_marshal_fn,
               _0RL_Img_mCameraImage_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::CameraImage*& _sp)
{
  return _a >>= (const Img::CameraImage*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Img::CameraImage*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mCameraImage,
                    _0RL_Img_mCameraImage_unmarshal_fn,
                    _0RL_Img_mCameraImage_marshal_fn,
                    _0RL_Img_mCameraImage_destructor_fn,
                    _v)) {
    _sp = (const Img::CameraImage*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mTimedCameraImage_marshal_fn(cdrStream& _s, void* _v)
{
  Img::TimedCameraImage* _p = (Img::TimedCameraImage*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mTimedCameraImage_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::TimedCameraImage* _p = new Img::TimedCameraImage;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Img_mTimedCameraImage_destructor_fn(void* _v)
{
  Img::TimedCameraImage* _p = (Img::TimedCameraImage*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Img::TimedCameraImage& _s)
{
  Img::TimedCameraImage* _p = new Img::TimedCameraImage(_s);
  _a.PR_insert(_0RL_tc_Img_mTimedCameraImage,
               _0RL_Img_mTimedCameraImage_marshal_fn,
               _0RL_Img_mTimedCameraImage_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Img::TimedCameraImage* _sp)
{
  _a.PR_insert(_0RL_tc_Img_mTimedCameraImage,
               _0RL_Img_mTimedCameraImage_marshal_fn,
               _0RL_Img_mTimedCameraImage_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::TimedCameraImage*& _sp)
{
  return _a >>= (const Img::TimedCameraImage*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Img::TimedCameraImage*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mTimedCameraImage,
                    _0RL_Img_mTimedCameraImage_unmarshal_fn,
                    _0RL_Img_mTimedCameraImage_marshal_fn,
                    _0RL_Img_mTimedCameraImage_destructor_fn,
                    _v)) {
    _sp = (const Img::TimedCameraImage*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mMultiCameraImage_marshal_fn(cdrStream& _s, void* _v)
{
  Img::MultiCameraImage* _p = (Img::MultiCameraImage*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mMultiCameraImage_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::MultiCameraImage* _p = new Img::MultiCameraImage;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Img_mMultiCameraImage_destructor_fn(void* _v)
{
  Img::MultiCameraImage* _p = (Img::MultiCameraImage*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Img::MultiCameraImage& _s)
{
  Img::MultiCameraImage* _p = new Img::MultiCameraImage(_s);
  _a.PR_insert(_0RL_tc_Img_mMultiCameraImage,
               _0RL_Img_mMultiCameraImage_marshal_fn,
               _0RL_Img_mMultiCameraImage_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Img::MultiCameraImage* _sp)
{
  _a.PR_insert(_0RL_tc_Img_mMultiCameraImage,
               _0RL_Img_mMultiCameraImage_marshal_fn,
               _0RL_Img_mMultiCameraImage_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::MultiCameraImage*& _sp)
{
  return _a >>= (const Img::MultiCameraImage*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Img::MultiCameraImage*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mMultiCameraImage,
                    _0RL_Img_mMultiCameraImage_unmarshal_fn,
                    _0RL_Img_mMultiCameraImage_marshal_fn,
                    _0RL_Img_mMultiCameraImage_destructor_fn,
                    _v)) {
    _sp = (const Img::MultiCameraImage*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mTimedMultiCameraImage_marshal_fn(cdrStream& _s, void* _v)
{
  Img::TimedMultiCameraImage* _p = (Img::TimedMultiCameraImage*)_v;
  *_p >>= _s;
}
static void _0RL_Img_mTimedMultiCameraImage_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Img::TimedMultiCameraImage* _p = new Img::TimedMultiCameraImage;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Img_mTimedMultiCameraImage_destructor_fn(void* _v)
{
  Img::TimedMultiCameraImage* _p = (Img::TimedMultiCameraImage*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Img::TimedMultiCameraImage& _s)
{
  Img::TimedMultiCameraImage* _p = new Img::TimedMultiCameraImage(_s);
  _a.PR_insert(_0RL_tc_Img_mTimedMultiCameraImage,
               _0RL_Img_mTimedMultiCameraImage_marshal_fn,
               _0RL_Img_mTimedMultiCameraImage_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Img::TimedMultiCameraImage* _sp)
{
  _a.PR_insert(_0RL_tc_Img_mTimedMultiCameraImage,
               _0RL_Img_mTimedMultiCameraImage_marshal_fn,
               _0RL_Img_mTimedMultiCameraImage_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::TimedMultiCameraImage*& _sp)
{
  return _a >>= (const Img::TimedMultiCameraImage*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Img::TimedMultiCameraImage*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Img_mTimedMultiCameraImage,
                    _0RL_Img_mTimedMultiCameraImage_unmarshal_fn,
                    _0RL_Img_mTimedMultiCameraImage_marshal_fn,
                    _0RL_Img_mTimedMultiCameraImage_destructor_fn,
                    _v)) {
    _sp = (const Img::TimedMultiCameraImage*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Img_mCameraCaptureService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_Img_mCameraCaptureService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(Img::CameraCaptureService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_Img_mCameraCaptureService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, Img::CameraCaptureService_ptr _o)
{
  Img::CameraCaptureService_ptr _no = Img::CameraCaptureService::_duplicate(_o);
  _a.PR_insert(Img::_tc_CameraCaptureService,
               _0RL_Img_mCameraCaptureService_marshal_fn,
               _0RL_Img_mCameraCaptureService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, Img::CameraCaptureService_ptr* _op)
{
  _a.PR_insert(Img::_tc_CameraCaptureService,
               _0RL_Img_mCameraCaptureService_marshal_fn,
               _0RL_Img_mCameraCaptureService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = Img::CameraCaptureService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Img::CameraCaptureService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(Img::_tc_CameraCaptureService,
                    _0RL_Img_mCameraCaptureService_unmarshal_fn,
                    _0RL_Img_mCameraCaptureService_marshal_fn,
                    _0RL_Img_mCameraCaptureService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (Img::CameraCaptureService_ptr)_r->_ptrToObjRef(Img::CameraCaptureService::_PD_repoId);
    else
      _o = Img::CameraCaptureService::_nil();
    return 1;
  }
  return 0;
}

