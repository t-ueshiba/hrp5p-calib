// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Img.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
Img::ImageData::operator>>= (cdrStream &_n) const
{
  width >>= _n;
  height >>= _n;
  format >>= _n;
  (const _CORBA_Unbounded_Sequence_Octet&) raw_data >>= _n;

}

void
Img::ImageData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)height <<= _n;
  (ColorFormat&)format <<= _n;
  (_CORBA_Unbounded_Sequence_Octet&)raw_data <<= _n;

}

void
Img::CameraIntrinsicParameter::operator>>= (cdrStream &_n) const
{
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(matrix_element),40,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 40);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 5; _0i0++){
      matrix_element[_0i0] >>= _n;
    }
  }
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > &) distortion_coefficient >>= _n;

}

void
Img::CameraIntrinsicParameter::operator<<= (cdrStream &_n)
{
  _n.unmarshalArrayDouble((_CORBA_Double*)(matrix_element), 5);
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > &)distortion_coefficient <<= _n;

}

void
Img::CameraImage::operator>>= (cdrStream &_n) const
{
  (const RTC::Time&) captured_time >>= _n;
  (const ImageData&) image >>= _n;
  (const CameraIntrinsicParameter&) intrinsic >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(extrinsic),128,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 128);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        extrinsic[_0i0][_0i1] >>= _n;
      }
    }
  }

}

void
Img::CameraImage::operator<<= (cdrStream &_n)
{
  (RTC::Time&)captured_time <<= _n;
  (ImageData&)image <<= _n;
  (CameraIntrinsicParameter&)intrinsic <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(extrinsic), 16);

}

void
Img::TimedCameraImage::operator>>= (cdrStream &_n) const
{
  (const RTC::Time&) tm >>= _n;
  (const CameraImage&) data >>= _n;
  error_code >>= _n;

}

void
Img::TimedCameraImage::operator<<= (cdrStream &_n)
{
  (RTC::Time&)tm <<= _n;
  (CameraImage&)data <<= _n;
  (::CORBA::Long&)error_code <<= _n;

}

void
Img::MultiCameraImage::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence< CameraImage > &) image_seq >>= _n;
  camera_set_id >>= _n;

}

void
Img::MultiCameraImage::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence< CameraImage > &)image_seq <<= _n;
  (::CORBA::Long&)camera_set_id <<= _n;

}

void
Img::TimedMultiCameraImage::operator>>= (cdrStream &_n) const
{
  (const RTC::Time&) tm >>= _n;
  (const MultiCameraImage&) data >>= _n;
  error_code >>= _n;

}

void
Img::TimedMultiCameraImage::operator<<= (cdrStream &_n)
{
  (RTC::Time&)tm <<= _n;
  (MultiCameraImage&)data <<= _n;
  (::CORBA::Long&)error_code <<= _n;

}

Img::CameraCaptureService_ptr Img::CameraCaptureService_Helper::_nil() {
  return ::Img::CameraCaptureService::_nil();
}

::CORBA::Boolean Img::CameraCaptureService_Helper::is_nil(::Img::CameraCaptureService_ptr p) {
  return ::CORBA::is_nil(p);

}

void Img::CameraCaptureService_Helper::release(::Img::CameraCaptureService_ptr p) {
  ::CORBA::release(p);
}

void Img::CameraCaptureService_Helper::marshalObjRef(::Img::CameraCaptureService_ptr obj, cdrStream& s) {
  ::Img::CameraCaptureService::_marshalObjRef(obj, s);
}

Img::CameraCaptureService_ptr Img::CameraCaptureService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Img::CameraCaptureService::_unmarshalObjRef(s);
}

void Img::CameraCaptureService_Helper::duplicate(::Img::CameraCaptureService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Img::CameraCaptureService_ptr
Img::CameraCaptureService::_duplicate(::Img::CameraCaptureService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Img::CameraCaptureService_ptr
Img::CameraCaptureService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Img::CameraCaptureService_ptr
Img::CameraCaptureService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Img::CameraCaptureService_ptr
Img::CameraCaptureService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_CameraCaptureService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_CameraCaptureService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_CameraCaptureService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Img::CameraCaptureService::_PD_repoId = "IDL:Img/CameraCaptureService:1.0";


Img::_objref_CameraCaptureService::~_objref_CameraCaptureService() {
  
}


Img::_objref_CameraCaptureService::_objref_CameraCaptureService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Img::CameraCaptureService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Img::_objref_CameraCaptureService::_ptrToObjRef(const char* id)
{
  if( id == ::Img::CameraCaptureService::_PD_repoId )
    return (::Img::CameraCaptureService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Img::CameraCaptureService::_PD_repoId) )
    return (::Img::CameraCaptureService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _wvoid
class _0RL_cd_5af2d202b3c2d8b9_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_5af2d202b3c2d8b9_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 1, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_5af2d202b3c2d8b9_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_5af2d202b3c2d8b9_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  Img::_impl_CameraCaptureService* impl = (Img::_impl_CameraCaptureService*) svnt->_ptrToInterface(Img::CameraCaptureService::_PD_repoId);
  impl->take_one_frame();


}

void Img::_objref_CameraCaptureService::take_one_frame()
{
  _0RL_cd_5af2d202b3c2d8b9_00000000 _call_desc(_0RL_lcfn_5af2d202b3c2d8b9_10000000, "take_one_frame", 15);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_5af2d202b3c2d8b9_20000000(omniCallDescriptor*, omniServant* svnt)
{
  
  Img::_impl_CameraCaptureService* impl = (Img::_impl_CameraCaptureService*) svnt->_ptrToInterface(Img::CameraCaptureService::_PD_repoId);
  impl->start_continuous();


}

void Img::_objref_CameraCaptureService::start_continuous()
{
  _0RL_cd_5af2d202b3c2d8b9_00000000 _call_desc(_0RL_lcfn_5af2d202b3c2d8b9_20000000, "start_continuous", 17);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_5af2d202b3c2d8b9_30000000(omniCallDescriptor*, omniServant* svnt)
{
  
  Img::_impl_CameraCaptureService* impl = (Img::_impl_CameraCaptureService*) svnt->_ptrToInterface(Img::CameraCaptureService::_PD_repoId);
  impl->stop_continuous();


}

void Img::_objref_CameraCaptureService::stop_continuous()
{
  _0RL_cd_5af2d202b3c2d8b9_00000000 _call_desc(_0RL_lcfn_5af2d202b3c2d8b9_30000000, "stop_continuous", 16);


  _invoke(_call_desc);



}
Img::_pof_CameraCaptureService::~_pof_CameraCaptureService() {}


omniObjRef*
Img::_pof_CameraCaptureService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Img::_objref_CameraCaptureService(ior, id);
}


::CORBA::Boolean
Img::_pof_CameraCaptureService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Img::CameraCaptureService::_PD_repoId) )
    return 1;
  
  return 0;
}

const Img::_pof_CameraCaptureService _the_pof_Img_mCameraCaptureService;

Img::_impl_CameraCaptureService::~_impl_CameraCaptureService() {}


::CORBA::Boolean
Img::_impl_CameraCaptureService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "take_one_frame") ) {

    _0RL_cd_5af2d202b3c2d8b9_00000000 _call_desc(_0RL_lcfn_5af2d202b3c2d8b9_10000000, "take_one_frame", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "start_continuous") ) {

    _0RL_cd_5af2d202b3c2d8b9_00000000 _call_desc(_0RL_lcfn_5af2d202b3c2d8b9_20000000, "start_continuous", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop_continuous") ) {

    _0RL_cd_5af2d202b3c2d8b9_00000000 _call_desc(_0RL_lcfn_5af2d202b3c2d8b9_30000000, "stop_continuous", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Img::_impl_CameraCaptureService::_ptrToInterface(const char* id)
{
  if( id == ::Img::CameraCaptureService::_PD_repoId )
    return (::Img::_impl_CameraCaptureService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Img::CameraCaptureService::_PD_repoId) )
    return (::Img::_impl_CameraCaptureService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Img::_impl_CameraCaptureService::_mostDerivedRepoId()
{
  return ::Img::CameraCaptureService::_PD_repoId;
}

POA_Img::CameraCaptureService::~CameraCaptureService() {}

