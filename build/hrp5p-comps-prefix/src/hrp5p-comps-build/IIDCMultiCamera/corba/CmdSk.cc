// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Cmd.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
Cmd::Value::operator>>= (cdrStream &_n) const
{
  i >>= _n;
  f >>= _n;

}

void
Cmd::Value::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)i <<= _n;
  (::CORBA::Float&)f <<= _n;

}

Cmd::Controller_ptr Cmd::Controller_Helper::_nil() {
  return ::Cmd::Controller::_nil();
}

::CORBA::Boolean Cmd::Controller_Helper::is_nil(::Cmd::Controller_ptr p) {
  return ::CORBA::is_nil(p);

}

void Cmd::Controller_Helper::release(::Cmd::Controller_ptr p) {
  ::CORBA::release(p);
}

void Cmd::Controller_Helper::marshalObjRef(::Cmd::Controller_ptr obj, cdrStream& s) {
  ::Cmd::Controller::_marshalObjRef(obj, s);
}

Cmd::Controller_ptr Cmd::Controller_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Cmd::Controller::_unmarshalObjRef(s);
}

void Cmd::Controller_Helper::duplicate(::Cmd::Controller_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Cmd::Controller_ptr
Cmd::Controller::_duplicate(::Cmd::Controller_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Cmd::Controller_ptr
Cmd::Controller::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Cmd::Controller_ptr
Cmd::Controller::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Cmd::Controller_ptr
Cmd::Controller::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Controller _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Controller* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Controller;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Cmd::Controller::_PD_repoId = "IDL:Cmd/Controller:1.0";


Cmd::_objref_Controller::~_objref_Controller() {
  
}


Cmd::_objref_Controller::_objref_Controller(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Cmd::Controller::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Cmd::_objref_Controller::_ptrToObjRef(const char* id)
{
  if( id == ::Cmd::Controller::_PD_repoId )
    return (::Cmd::Controller_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Cmd::Controller::_PD_repoId) )
    return (::Cmd::Controller_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_3667538aab613918_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3667538aab613918_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_3667538aab613918_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_3667538aab613918_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_3667538aab613918_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_3667538aab613918_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3667538aab613918_00000000* tcd = (_0RL_cd_3667538aab613918_00000000*)cd;
  Cmd::_impl_Controller* impl = (Cmd::_impl_Controller*) svnt->_ptrToInterface(Cmd::Controller::_PD_repoId);
  tcd->result = impl->getCmds();


}

char* Cmd::_objref_Controller::getCmds()
{
  _0RL_cd_3667538aab613918_00000000 _call_desc(_0RL_lcfn_3667538aab613918_10000000, "getCmds", 8);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCmd_mValues_i_cCmd_mValues
class _0RL_cd_3667538aab613918_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3667538aab613918_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  Cmd::Values_var arg_0_;
  const Cmd::Values* arg_0;
  Cmd::Values_var result;
};

void _0RL_cd_3667538aab613918_20000000::marshalArguments(cdrStream& _n)
{
  (const Cmd::Values&) *arg_0 >>= _n;

}

void _0RL_cd_3667538aab613918_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Cmd::Values;
  (Cmd::Values&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_3667538aab613918_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const Cmd::Values&) result >>= _n;

}

void _0RL_cd_3667538aab613918_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Cmd::Values;
  (Cmd::Values&)result <<= _n;

}

const char* const _0RL_cd_3667538aab613918_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_3667538aab613918_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3667538aab613918_20000000* tcd = (_0RL_cd_3667538aab613918_20000000*)cd;
  Cmd::_impl_Controller* impl = (Cmd::_impl_Controller*) svnt->_ptrToInterface(Cmd::Controller::_PD_repoId);
  tcd->result = impl->setValues(*tcd->arg_0);


}

Cmd::Values* Cmd::_objref_Controller::setValues(const ::Cmd::Values& vals)
{
  _0RL_cd_3667538aab613918_20000000 _call_desc(_0RL_lcfn_3667538aab613918_30000000, "setValues", 10);
  _call_desc.arg_0 = &(::Cmd::Values&) vals;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCmd_mValues_i_cCmd_mValues_i_cboolean
class _0RL_cd_3667538aab613918_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3667538aab613918_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  Cmd::Values_var arg_0_;
  const Cmd::Values* arg_0;
  ::CORBA::Boolean arg_1;
  Cmd::Values_var result;
};

void _0RL_cd_3667538aab613918_40000000::marshalArguments(cdrStream& _n)
{
  (const Cmd::Values&) *arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_3667538aab613918_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new Cmd::Values;
  (Cmd::Values&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_3667538aab613918_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const Cmd::Values&) result >>= _n;

}

void _0RL_cd_3667538aab613918_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Cmd::Values;
  (Cmd::Values&)result <<= _n;

}

const char* const _0RL_cd_3667538aab613918_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_3667538aab613918_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3667538aab613918_40000000* tcd = (_0RL_cd_3667538aab613918_40000000*)cd;
  Cmd::_impl_Controller* impl = (Cmd::_impl_Controller*) svnt->_ptrToInterface(Cmd::Controller::_PD_repoId);
  tcd->result = impl->getValues(*tcd->arg_0, tcd->arg_1);


}

Cmd::Values* Cmd::_objref_Controller::getValues(const ::Cmd::Values& ids, ::CORBA::Boolean range)
{
  _0RL_cd_3667538aab613918_40000000 _call_desc(_0RL_lcfn_3667538aab613918_50000000, "getValues", 10);
  _call_desc.arg_0 = &(::Cmd::Values&) ids;
  _call_desc.arg_1 = range;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
Cmd::_pof_Controller::~_pof_Controller() {}


omniObjRef*
Cmd::_pof_Controller::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Cmd::_objref_Controller(ior, id);
}


::CORBA::Boolean
Cmd::_pof_Controller::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Cmd::Controller::_PD_repoId) )
    return 1;
  
  return 0;
}

const Cmd::_pof_Controller _the_pof_Cmd_mController;

Cmd::_impl_Controller::~_impl_Controller() {}


::CORBA::Boolean
Cmd::_impl_Controller::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getCmds") ) {

    _0RL_cd_3667538aab613918_00000000 _call_desc(_0RL_lcfn_3667538aab613918_10000000, "getCmds", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setValues") ) {

    _0RL_cd_3667538aab613918_20000000 _call_desc(_0RL_lcfn_3667538aab613918_30000000, "setValues", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getValues") ) {

    _0RL_cd_3667538aab613918_40000000 _call_desc(_0RL_lcfn_3667538aab613918_50000000, "getValues", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Cmd::_impl_Controller::_ptrToInterface(const char* id)
{
  if( id == ::Cmd::Controller::_PD_repoId )
    return (::Cmd::_impl_Controller*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Cmd::Controller::_PD_repoId) )
    return (::Cmd::_impl_Controller*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Cmd::_impl_Controller::_mostDerivedRepoId()
{
  return ::Cmd::Controller::_PD_repoId;
}

POA_Cmd::Controller::~Controller() {}

