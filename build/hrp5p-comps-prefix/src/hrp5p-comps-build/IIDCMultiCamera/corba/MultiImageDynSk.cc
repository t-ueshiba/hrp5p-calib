// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "MultiImage.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_MultiImage_mMatrix34d = CORBA::TypeCode::PR_alias_tc("IDL:MultiImage/Matrix34d:1.0", "Matrix34d", CORBA::TypeCode::PR_array_tc(3, CORBA::TypeCode::PR_array_tc(4, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MultiImage { 
  const ::CORBA::TypeCode_ptr _tc_Matrix34d = _0RL_tc_MultiImage_mMatrix34d;
} 
#else
const ::CORBA::TypeCode_ptr MultiImage::_tc_Matrix34d = _0RL_tc_MultiImage_mMatrix34d;
#endif

static const char* _0RL_enumMember_MultiImage_mPixelFormat[] = { "UNKNOWN", "MONO_8", "YUV_411", "YUV_422", "YUYV_422", "YUV_444", "RGB_24", "FLT" };
static CORBA::TypeCode_ptr _0RL_tc_MultiImage_mPixelFormat = CORBA::TypeCode::PR_enum_tc("IDL:MultiImage/PixelFormat:1.0", "PixelFormat", _0RL_enumMember_MultiImage_mPixelFormat, 8, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MultiImage { 
  const ::CORBA::TypeCode_ptr _tc_PixelFormat = _0RL_tc_MultiImage_mPixelFormat;
} 
#else
const ::CORBA::TypeCode_ptr MultiImage::_tc_PixelFormat = _0RL_tc_MultiImage_mPixelFormat;
#endif

static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_MultiImage_mHeader[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"format", _0RL_tc_MultiImage_mPixelFormat},
  {"width", CORBA::TypeCode::PR_ulong_tc()},
  {"height", CORBA::TypeCode::PR_ulong_tc()},
  {"size", CORBA::TypeCode::PR_ulong_tc()},
  {"P", _0RL_tc_MultiImage_mMatrix34d},
  {"d1", CORBA::TypeCode::PR_double_tc()},
  {"d2", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_MultiImage_mHeader
#  undef _0RL_tc_MultiImage_mHeader
#endif
static CORBA::TypeCode_ptr _0RL_tc_MultiImage_mHeader = CORBA::TypeCode::PR_struct_tc("IDL:MultiImage/Header:1.0", "Header", _0RL_structmember_MultiImage_mHeader, 8, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MultiImage { 
  const ::CORBA::TypeCode_ptr _tc_Header = _0RL_tc_MultiImage_mHeader;
} 
#else
const ::CORBA::TypeCode_ptr MultiImage::_tc_Header = _0RL_tc_MultiImage_mHeader;
#endif




static CORBA::PR_structMember _0RL_structmember_MultiImage_mTimedImages[] = {
  {"headers", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_MultiImage_mHeader, &_0RL_tcTrack)},
  {"data", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_MultiImage_mTimedImages
#  undef _0RL_tc_MultiImage_mTimedImages
#endif
static CORBA::TypeCode_ptr _0RL_tc_MultiImage_mTimedImages = CORBA::TypeCode::PR_struct_tc("IDL:MultiImage/TimedImages:1.0", "TimedImages", _0RL_structmember_MultiImage_mTimedImages, 2, &_0RL_tcTrack);



#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MultiImage { 
  const ::CORBA::TypeCode_ptr _tc_TimedImages = _0RL_tc_MultiImage_mTimedImages;
} 
#else
const ::CORBA::TypeCode_ptr MultiImage::_tc_TimedImages = _0RL_tc_MultiImage_mTimedImages;
#endif


static void _0RL_MultiImage_mMatrix34d_marshal_fn(cdrStream& _s, void* _v)
{
  MultiImage::Matrix34d_slice* _a = (MultiImage::Matrix34d_slice*)_v;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _s.marshal_byte_swap()) {
    _s.put_octet_array((_CORBA_Octet*)(_a),96,omni::ALIGN_8);
  }
  else 
#endif
  {
    _s.declareArrayLength(omni::ALIGN_8, 96);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 4; _0i1++){
        _a[_0i0][_0i1] >>= _s;
      }
    }
  }

}
static void _0RL_MultiImage_mMatrix34d_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MultiImage::Matrix34d_slice* _a = MultiImage::Matrix34d_alloc();
  _s.unmarshalArrayDouble((_CORBA_Double*)(_a), 12);

  _v = _a;
}
static void _0RL_MultiImage_mMatrix34d_destructor_fn(void* _v)
{
  MultiImage::Matrix34d_slice* _a = (MultiImage::Matrix34d_slice*)_v;
  MultiImage::Matrix34d_free(_a);
}

void operator<<=(::CORBA::Any& _a, const MultiImage::Matrix34d_forany& _s)
{
  MultiImage::Matrix34d_slice* _v;
  if (!_s.NP_nocopy())
    _v = MultiImage::Matrix34d_dup(_s);
  else
    _v = _s.NP_getSlice();

  _a.PR_insert(_0RL_tc_MultiImage_mMatrix34d,
               _0RL_MultiImage_mMatrix34d_marshal_fn,
               _0RL_MultiImage_mMatrix34d_destructor_fn,
               _v);
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::Matrix34d_forany& _s)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MultiImage_mMatrix34d,
                    _0RL_MultiImage_mMatrix34d_unmarshal_fn,
                    _0RL_MultiImage_mMatrix34d_marshal_fn,
                    _0RL_MultiImage_mMatrix34d_destructor_fn,
                    _v)) {
    _s = (MultiImage::Matrix34d_slice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MultiImage_mPixelFormat_marshal_fn(cdrStream& _s, void* _v)
{
  MultiImage::PixelFormat* _p = (MultiImage::PixelFormat*)_v;
  *_p >>= _s;
}
static void _0RL_MultiImage_mPixelFormat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MultiImage::PixelFormat* _p = (MultiImage::PixelFormat*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, MultiImage::PixelFormat _s)
{
  _a.PR_insert(_0RL_tc_MultiImage_mPixelFormat,
               _0RL_MultiImage_mPixelFormat_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::PixelFormat& _s)
{
  return _a.PR_extract(_0RL_tc_MultiImage_mPixelFormat,
                       _0RL_MultiImage_mPixelFormat_unmarshal_fn,
                       &_s);
}

static void _0RL_MultiImage_mHeader_marshal_fn(cdrStream& _s, void* _v)
{
  MultiImage::Header* _p = (MultiImage::Header*)_v;
  *_p >>= _s;
}
static void _0RL_MultiImage_mHeader_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MultiImage::Header* _p = new MultiImage::Header;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MultiImage_mHeader_destructor_fn(void* _v)
{
  MultiImage::Header* _p = (MultiImage::Header*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MultiImage::Header& _s)
{
  MultiImage::Header* _p = new MultiImage::Header(_s);
  _a.PR_insert(_0RL_tc_MultiImage_mHeader,
               _0RL_MultiImage_mHeader_marshal_fn,
               _0RL_MultiImage_mHeader_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MultiImage::Header* _sp)
{
  _a.PR_insert(_0RL_tc_MultiImage_mHeader,
               _0RL_MultiImage_mHeader_marshal_fn,
               _0RL_MultiImage_mHeader_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::Header*& _sp)
{
  return _a >>= (const MultiImage::Header*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MultiImage::Header*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MultiImage_mHeader,
                    _0RL_MultiImage_mHeader_unmarshal_fn,
                    _0RL_MultiImage_mHeader_marshal_fn,
                    _0RL_MultiImage_mHeader_destructor_fn,
                    _v)) {
    _sp = (const MultiImage::Header*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MultiImage_mTimedImages_marshal_fn(cdrStream& _s, void* _v)
{
  MultiImage::TimedImages* _p = (MultiImage::TimedImages*)_v;
  *_p >>= _s;
}
static void _0RL_MultiImage_mTimedImages_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MultiImage::TimedImages* _p = new MultiImage::TimedImages;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MultiImage_mTimedImages_destructor_fn(void* _v)
{
  MultiImage::TimedImages* _p = (MultiImage::TimedImages*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MultiImage::TimedImages& _s)
{
  MultiImage::TimedImages* _p = new MultiImage::TimedImages(_s);
  _a.PR_insert(_0RL_tc_MultiImage_mTimedImages,
               _0RL_MultiImage_mTimedImages_marshal_fn,
               _0RL_MultiImage_mTimedImages_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MultiImage::TimedImages* _sp)
{
  _a.PR_insert(_0RL_tc_MultiImage_mTimedImages,
               _0RL_MultiImage_mTimedImages_marshal_fn,
               _0RL_MultiImage_mTimedImages_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MultiImage::TimedImages*& _sp)
{
  return _a >>= (const MultiImage::TimedImages*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MultiImage::TimedImages*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MultiImage_mTimedImages,
                    _0RL_MultiImage_mTimedImages_unmarshal_fn,
                    _0RL_MultiImage_mTimedImages_marshal_fn,
                    _0RL_MultiImage_mTimedImages_destructor_fn,
                    _v)) {
    _sp = (const MultiImage::TimedImages*)_v;
    return 1;
  }
  return 0;
}

