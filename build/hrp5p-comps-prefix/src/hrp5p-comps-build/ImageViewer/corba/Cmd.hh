// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Cmd_hh__
#define __Cmd_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Cmd
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Cmd
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Cmd
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Cmd

_CORBA_MODULE_BEG

  struct Value {
    typedef _CORBA_ConstrType_Fix_Var<Value> _var_type;

    
    ::CORBA::Long i;

    ::CORBA::Float f;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Value::_var_type Value_var;

  typedef Value& Value_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Value;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Values;

  class Values_var;

  class Values : public _CORBA_Unbounded_Sequence< Value >  {
  public:
    typedef Values_var _var_type;
    inline Values() {}
    inline Values(const Values& _s)
      : _CORBA_Unbounded_Sequence< Value > (_s) {}

    inline Values(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< Value > (_max) {}
    inline Values(_CORBA_ULong _max, _CORBA_ULong _len, Value* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< Value > (_max, _len, _val, _rel) {}

  

    inline Values& operator = (const Values& _s) {
      _CORBA_Unbounded_Sequence< Value > ::operator=(_s);
      return *this;
    }
  };

  class Values_out;

  class Values_var {
  public:
    inline Values_var() : _pd_seq(0) {}
    inline Values_var(Values* _s) : _pd_seq(_s) {}
    inline Values_var(const Values_var& _s) {
      if( _s._pd_seq )  _pd_seq = new Values(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~Values_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline Values_var& operator = (Values* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Values_var& operator = (const Values_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new Values;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline Value& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Values* operator -> () { return _pd_seq; }
    inline const Values* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Values& () const { return *_pd_seq; }
#else
    inline operator const Values& () const { return *_pd_seq; }
    inline operator Values& () { return *_pd_seq; }
#endif
      
    inline const Values& in() const { return *_pd_seq; }
    inline Values&       inout()    { return *_pd_seq; }
    inline Values*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Values* _retn() { Values* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Values_out;
    
  private:
    Values* _pd_seq;
  };

  class Values_out {
  public:
    inline Values_out(Values*& _s) : _data(_s) { _data = 0; }
    inline Values_out(Values_var& _s)
      : _data(_s._pd_seq) { _s = (Values*) 0; }
    inline Values_out(const Values_out& _s) : _data(_s._data) {}
    inline Values_out& operator = (const Values_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Values_out& operator = (Values* _s) {
      _data = _s;
      return *this;
    }
    inline operator Values*&()  { return _data; }
    inline Values*& ptr()       { return _data; }
    inline Values* operator->() { return _data; }

    inline Value& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Values*& _data;

  private:
    Values_out();
    Values_out& operator=(const Values_var&);
  };

#ifndef __Cmd_mController__
#define __Cmd_mController__

  class Controller;
  class _objref_Controller;
  class _impl_Controller;
  
  typedef _objref_Controller* Controller_ptr;
  typedef Controller_ptr ControllerRef;

  class Controller_Helper {
  public:
    typedef Controller_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Controller, Controller_Helper> Controller_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Controller,Controller_Helper > Controller_out;

#endif

  // interface Controller
  class Controller {
  public:
    // Declarations for this interface type.
    typedef Controller_ptr _ptr_type;
    typedef Controller_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Controller :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    char* getCmds();
    Values* setValues(const ::Cmd::Values& vals);
    Values* getValues(const ::Cmd::Values& ids, ::CORBA::Boolean range);

    inline _objref_Controller()  { _PR_setobj(0); }  // nil
    _objref_Controller(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Controller();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Controller(const _objref_Controller&);
    _objref_Controller& operator = (const _objref_Controller&);
    // not implemented

    friend class Controller;
  };

  class _pof_Controller : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Controller() : _OMNI_NS(proxyObjectFactory)(Controller::_PD_repoId) {}
    virtual ~_pof_Controller();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Controller :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Controller();

    virtual char* getCmds() = 0;
    virtual Values* setValues(const ::Cmd::Values& vals) = 0;
    virtual Values* getValues(const ::Cmd::Values& ids, ::CORBA::Boolean range) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Controller;

_CORBA_MODULE_END



_CORBA_MODULE POA_Cmd
_CORBA_MODULE_BEG

  class Controller :
    public virtual Cmd::_impl_Controller,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Controller();

    inline ::Cmd::Controller_ptr _this() {
      return (::Cmd::Controller_ptr) _do_this(::Cmd::Controller::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Cmd
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const Cmd::Value& _s);
extern void operator<<=(::CORBA::Any& _a, Cmd::Value* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Cmd::Value*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Cmd::Value*& _sp);

void operator<<=(::CORBA::Any& _a, const Cmd::Values& _s);
void operator<<=(::CORBA::Any& _a, Cmd::Values* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Cmd::Values*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Cmd::Values*& _sp);

void operator<<=(::CORBA::Any& _a, Cmd::Controller_ptr _s);
void operator<<=(::CORBA::Any& _a, Cmd::Controller_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Cmd::Controller_ptr& _s);



inline void
Cmd::Controller::_marshalObjRef(::Cmd::Controller_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Cmd
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Cmd
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Cmd
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Cmd
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Cmd
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Cmd
#endif

#endif  // __Cmd_hh__

