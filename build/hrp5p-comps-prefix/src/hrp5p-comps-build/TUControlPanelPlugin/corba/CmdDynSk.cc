// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Cmd.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_Cmd_mValue[] = {
  {"i", CORBA::TypeCode::PR_long_tc()},
  {"f", CORBA::TypeCode::PR_float_tc()}
};

#ifdef _0RL_tc_Cmd_mValue
#  undef _0RL_tc_Cmd_mValue
#endif
static CORBA::TypeCode_ptr _0RL_tc_Cmd_mValue = CORBA::TypeCode::PR_struct_tc("IDL:Cmd/Value:1.0", "Value", _0RL_structmember_Cmd_mValue, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Cmd { 
  const ::CORBA::TypeCode_ptr _tc_Value = _0RL_tc_Cmd_mValue;
} 
#else
const ::CORBA::TypeCode_ptr Cmd::_tc_Value = _0RL_tc_Cmd_mValue;
#endif






static CORBA::TypeCode_ptr _0RL_tc_Cmd_mValues = CORBA::TypeCode::PR_alias_tc("IDL:Cmd/Values:1.0", "Values", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Cmd_mValue, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Cmd { 
  const ::CORBA::TypeCode_ptr _tc_Values = _0RL_tc_Cmd_mValues;
} 
#else
const ::CORBA::TypeCode_ptr Cmd::_tc_Values = _0RL_tc_Cmd_mValues;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Cmd { 
  const ::CORBA::TypeCode_ptr _tc_Controller = CORBA::TypeCode::PR_interface_tc("IDL:Cmd/Controller:1.0", "Controller", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr Cmd::_tc_Controller = CORBA::TypeCode::PR_interface_tc("IDL:Cmd/Controller:1.0", "Controller", &_0RL_tcTrack);
#endif

static void _0RL_Cmd_mValue_marshal_fn(cdrStream& _s, void* _v)
{
  Cmd::Value* _p = (Cmd::Value*)_v;
  *_p >>= _s;
}
static void _0RL_Cmd_mValue_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Cmd::Value* _p = new Cmd::Value;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Cmd_mValue_destructor_fn(void* _v)
{
  Cmd::Value* _p = (Cmd::Value*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Cmd::Value& _s)
{
  Cmd::Value* _p = new Cmd::Value(_s);
  _a.PR_insert(_0RL_tc_Cmd_mValue,
               _0RL_Cmd_mValue_marshal_fn,
               _0RL_Cmd_mValue_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Cmd::Value* _sp)
{
  _a.PR_insert(_0RL_tc_Cmd_mValue,
               _0RL_Cmd_mValue_marshal_fn,
               _0RL_Cmd_mValue_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Cmd::Value*& _sp)
{
  return _a >>= (const Cmd::Value*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Cmd::Value*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Cmd_mValue,
                    _0RL_Cmd_mValue_unmarshal_fn,
                    _0RL_Cmd_mValue_marshal_fn,
                    _0RL_Cmd_mValue_destructor_fn,
                    _v)) {
    _sp = (const Cmd::Value*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Cmd_mValues_marshal_fn(cdrStream& _s, void* _v)
{
  Cmd::Values* _p = (Cmd::Values*)_v;
  *_p >>= _s;
}
static void _0RL_Cmd_mValues_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Cmd::Values* _p = new Cmd::Values;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Cmd_mValues_destructor_fn(void* _v)
{
  Cmd::Values* _p = (Cmd::Values*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Cmd::Values& _s)
{
  Cmd::Values* _p = new Cmd::Values(_s);
  _a.PR_insert(_0RL_tc_Cmd_mValues,
               _0RL_Cmd_mValues_marshal_fn,
               _0RL_Cmd_mValues_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Cmd::Values* _sp)
{
  _a.PR_insert(_0RL_tc_Cmd_mValues,
               _0RL_Cmd_mValues_marshal_fn,
               _0RL_Cmd_mValues_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Cmd::Values*& _sp)
{
  return _a >>= (const Cmd::Values*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Cmd::Values*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Cmd_mValues,
                    _0RL_Cmd_mValues_unmarshal_fn,
                    _0RL_Cmd_mValues_marshal_fn,
                    _0RL_Cmd_mValues_destructor_fn,
                    _v)) {
    _sp = (const Cmd::Values*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Cmd_mController_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_Cmd_mController_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(Cmd::Controller::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_Cmd_mController_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, Cmd::Controller_ptr _o)
{
  Cmd::Controller_ptr _no = Cmd::Controller::_duplicate(_o);
  _a.PR_insert(Cmd::_tc_Controller,
               _0RL_Cmd_mController_marshal_fn,
               _0RL_Cmd_mController_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, Cmd::Controller_ptr* _op)
{
  _a.PR_insert(Cmd::_tc_Controller,
               _0RL_Cmd_mController_marshal_fn,
               _0RL_Cmd_mController_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = Cmd::Controller::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Cmd::Controller_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(Cmd::_tc_Controller,
                    _0RL_Cmd_mController_unmarshal_fn,
                    _0RL_Cmd_mController_marshal_fn,
                    _0RL_Cmd_mController_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (Cmd::Controller_ptr)_r->_ptrToObjRef(Cmd::Controller::_PD_repoId);
    else
      _o = Cmd::Controller::_nil();
    return 1;
  }
  return 0;
}

